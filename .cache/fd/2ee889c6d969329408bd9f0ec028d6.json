{"id":"index.html","dependencies":[{"name":"./vue/index.js","dynamic":true,"resolved":"/Users/junky/Desktop/virtual-dom/vue/index.js","parent":"/Users/junky/Desktop/virtual-dom/index.html"}],"generated":{"html":"<html>\n  <body>\n    <div id=\"click\">change</div>\n    <div id=\"app\">\n      <p>{{ msg }}</p>\n      <span>{{ content }}</span>\n      <div>\n        <div>{{content}}</div>\n        <div>\n          <div>{{msg}}</div>\n        </div>\n      </div>\n      <div v-text=\"msg\"></div>\n      <input type=\"text\" v-model=\"msg\">\n    </div>\n    <!-- <script src=\"./index.js\"></script> -->\n    <script src=\"/2d53a435d52e33454455bbf5057caca2.js\"></script>\n    <!-- <script>\n      class Compile {\n        constructor(vm) {\n          this.el = vm.$el;\n          this.vm = vm\n          this.compile(this.el)\n        }\n        // 编译模板,处理文本节点和元素节点\n        compile(el) {\n          let childNodes = el.childNodes;\n          Array.from(childNodes).forEach(node => {\n            if(this.isTextNode(node)) {\n              this.compileText(node)\n            } else if(this.isElementNode(node)) {\n              this.compileElement(node)\n            }\n            if(node.childNodes && node.childNodes.length) {\n              this.compile(node)\n            }\n          })\n        }\n        // 处理元素节点 处理指令\n        compileElement(node) {\n          // console.dir(node.attributes)\n          Array.from(node.attributes).forEach(attr => {\n            let attrName = attr.name\n            const isDirective = this.isDirective(attrName)\n            if(isDirective) {\n              attrName = attrName.substr(2)\n              const key = attr.value\n              this.update(node, key, attrName)\n            }\n          })\n        }\n        \n        update(node, key, attrName) {\n          const updateFn = this[attrName + 'Updater']\n          updateFn && updateFn.call(this, node, this.vm[key], key)\n        }\n\n        textUpdater(node, value, key) {\n          node.textContent = value\n          new Watcher(this.vm, key, newVal => {\n            node.textContent = newVal\n          })\n        }\n\n        modelUpdater(node, value, key) {\n          node.value = value\n          new Watcher(this.vm, key, newVal => {\n            node.value = newVal\n          })\n          // 双向绑定\n          node.addEventListener('input', () => {\n            this.vm[key] = node.value\n          })\n        }\n\n         // 处理文本节点 处理{{}}\n        compileText(node) {\n          // console.dir(node)\n          let reg = /\\{\\{(.+?)\\}\\}/\n          let value = node.textContent\n          if(reg.test(value)) {\n            let key = RegExp.$1.trim()\n            console.log(key, this.vm)\n            node.textContent = value.replace(reg, this.vm[key])\n            new Watcher(this.vm, key, (newValue)=> {\n              node.textContent = newValue;\n            })\n          }\n        }\n        // 判断是不是指令\n        isDirective(attrName) {\n          return attrName.startsWith('v-')\n        }\n\n        isTextNode(node) {\n          return node.nodeType === 3\n        }\n\n        isElementNode(node) {\n          return node.nodeType === 1\n        }\n      }\n      class Observer {\n      \tconstructor(data) {\n      \t\tthis.walk(data)\n      \t}\n      \twalk(data) {\n          if(!data || typeof data !== 'object') return \n      \t\tObject.keys(data).forEach(key => {\n      \t\t\tthis.defineReactive(data, key, data[key])\n      \t\t})\n      \t}\n      \tdefineReactive(data, key, value) {\n          const that = this\n          that.walk(value)\n          let dep = new Dep() //收集依赖并发送通知\n      \t\tObject.defineProperty(data, key, {\n      \t\t\tenumerable: true,\n      \t\t\tconfigurable: true,\n      \t\t\tget() {\n              Dep.target && dep.addSub(Dep.target) //收集依赖\n      \t\t\t\treturn value\n      \t\t\t},\n      \t\t\tset(newVal) {\n      \t\t\t\tif(newVal === value) return\n              value = newVal\n              that.walk(newVal)\n              dep.notify()\n      \t\t\t\t// addDep()\n      \t\t\t}\n      \t\t})\n\n      \t}\n      }\n      class Watcher {\n        constructor(vm, key, cb) {\n          this.vm = vm ;\n          this.key = key;\n          this.cb = cb; // 回调函数\n\n          // 把watcher 对象记录到 Dep 类的静态属性target\n          Dep.target = this\n          // 触发get方法 get调用addSub\n\n          this.oldValue = vm[key] //这就是访问属性\n\n          Dep.target = null;\n        }\n        update() {\n          const newValue = this.vm[this.key]\n          if(this.oldValue === newValue) return \n          this.cb(newValue)\n        }\n      }\n      class Dep {\n        constructor() {\n          this.subs = []\n        }\n        addSub(sub) {\n          if(sub && sub.update) {\n            this.subs.push(sub)\n          }\n        }\n        notify() {\n          this.subs.forEach(sub => {\n            sub.update()\n          })\n        }\n      }\n      class Vue {\n      \tconstructor(options) {\n      \t\t// 1. 通过属性保存选项数据\n      \t\tthis.$options = options || {}\n      \t\tthis.$data = options.data || {}\n      \t\tthis.$el = typeof options.el === 'string' ? document.querySelector(options.el) : el\n      \t\t// 2.data数据保存到vue实例getter setter里面\n      \t\tthis._proxyData(this.$data)\n          // 3. 调用observe 方法，监听数据变化\n          new Observer(options.data)\n          // 4. 调用compile 解析指令和插值表达式\n          new Compile(this)\n      \t}\n      \t_proxyData(data) {\n      \t\tObject.keys(data).forEach(key => {\n      \t\t\tObject.defineProperty(this, key, {\n      \t\t\t\tenumerable: true,\n      \t\t\t\tconfigurable: true,\n      \t\t\t\tget() {\n      \t\t\t\t\treturn data[key]\n      \t\t\t\t},\n      \t\t\t\tset(value) {\n      \t\t\t\t\tif(value === data[key]) return\n      \t\t\t\t\tdata[key] = value\n      \t\t\t\t}\n      \t\t\t})\n      \t\t})\n      \t}\n      }\n      let vm = new Vue({\n        el: '#app',\n        data: {\n          number: 0,\n          msg: 'hello',\n          person: {\n            name: 'xxx'\n          },\n          content: '111',\n          name: '123'\n        },\n        render() {\n          document.getElementById('myApp').text = data.number\n        }\n      })\n      console.log(vm)\n    </script> -->\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"744fb4b50f4e6d46c04ae10b25fe0249","cacheData":{}}